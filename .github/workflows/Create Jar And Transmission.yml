# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    services:
    # Elasticsearch 서비스 추가
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
        ports:
          - 9200:9200
        options: >
          --name elasticsearch
          --env discovery.type=single-node
          --env xpack.security.enabled=false

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # plain 버전 제외하고 JAR 파일 전송
    - name: Install sshpass
      run: sudo apt-get install -y sshpass

    - name: Copy jar files excluding plain version
      env:
        SH_PASSWORD: ${{ secrets.SSHPASSWORD }}
      run: |
        for jar in build/libs/*.jar; do
          if [[ ! "$jar" =~ -plain\.jar$ ]]; then
            sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no -P 8080 "$jar" root@49.236.136.132:/home/jarFiles
          fi
        done

      # 쉘스크립트 파일 실행
    - name: Execute shell script on remote server
      env:
          SSH_PASSWORD: ${{ secrets.SSHPASSWORD }}
      run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -p 8080 root@49.236.136.132 'bash /home/shellScript/deploy.sh'

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
